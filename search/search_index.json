{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Learn Redis \u00b6 \u9605\u8bfb\u5de5\u5177: SourceTrail \u770bredis\u7684\u6e90\u7801\uff0c\u9996\u5148\u9700\u8981\u660e\u767dredis\u7684\u5927\u81f4\u6d41\u7a0b redis\u662f\u4e00\u4e2a\u7f13\u5b58\u670d\u52a1\u5668\uff0c\u65e2\u7136\u662f\u670d\u52a1\u5668\u5c31\u5fc5\u7136\u4f1a\u6709\u4ee5\u4e0b\u7684\u6d41\u7a0b \u542f\u52a8\u4e8b\u4ef6\u5faa\u73af \u63a5\u53d7\u8fde\u63a5\uff0c\u5904\u7406\u5ba2\u6237\u7aef\u8bf7\u6c42 \u6839\u636e\u7279\u5b9a\u7684\u534f\u8bae\u89e3\u6790\u8bf7\u6c42\uff0c\u7136\u540e\u8fdb\u884c\u5904\u7406 \u5c06\u7ed3\u679c\u8fd4\u56de \u90a3\u4e48\u53ea\u9700\u8981\u6309\u7167\u8fd9\u4e9b\u6d41\u7a0b\u4e00\u6b65\u4e00\u6b65\u5f80\u4e0b\u8d70\uff0c\u5c31\u80fd\u591f\u6478\u6e05redis\u7684\u5927\u90e8\u5206\u6e90\u7801 \u5176\u4e2d\uff0c\u6bd4\u8f83\u60f3\u8981\u4e86\u89e3\u7684\u5c31\u662f redis\u7684\u534f\u8bae redis\u541e\u5410\u4e3a\u4f55\u5982\u6b64\u4e4b\u9ad8\u4ee5\u81f3\u4e8e\u8bf4\u201c\u7f51\u7edc\u5e26\u5bbd\u5c31\u662fredis\u6700\u5927\u7684\u74f6\u9888\u201d \u4f7f\u7528\u4e00\u4e2amap\u6765\u505a\u4e00\u4e2akv\u7f13\u5b58\u670d\u52a1\u5668\u662f\u5426\u80fd\u591f\u505a\u5230\u548credis\u4e00\u6837\u7684\u6027\u80fd\uff1f\u5982\u679c\u4e0d\u80fd\uff0c\u662f\u4e3a\u4ec0\u4e48\uff0credis\u7684\u6570\u636e\u7ed3\u6784\u6027\u80fd\u6709\u591a\u9ad8","title":"Home"},{"location":"#learn-redis","text":"\u9605\u8bfb\u5de5\u5177: SourceTrail \u770bredis\u7684\u6e90\u7801\uff0c\u9996\u5148\u9700\u8981\u660e\u767dredis\u7684\u5927\u81f4\u6d41\u7a0b redis\u662f\u4e00\u4e2a\u7f13\u5b58\u670d\u52a1\u5668\uff0c\u65e2\u7136\u662f\u670d\u52a1\u5668\u5c31\u5fc5\u7136\u4f1a\u6709\u4ee5\u4e0b\u7684\u6d41\u7a0b \u542f\u52a8\u4e8b\u4ef6\u5faa\u73af \u63a5\u53d7\u8fde\u63a5\uff0c\u5904\u7406\u5ba2\u6237\u7aef\u8bf7\u6c42 \u6839\u636e\u7279\u5b9a\u7684\u534f\u8bae\u89e3\u6790\u8bf7\u6c42\uff0c\u7136\u540e\u8fdb\u884c\u5904\u7406 \u5c06\u7ed3\u679c\u8fd4\u56de \u90a3\u4e48\u53ea\u9700\u8981\u6309\u7167\u8fd9\u4e9b\u6d41\u7a0b\u4e00\u6b65\u4e00\u6b65\u5f80\u4e0b\u8d70\uff0c\u5c31\u80fd\u591f\u6478\u6e05redis\u7684\u5927\u90e8\u5206\u6e90\u7801 \u5176\u4e2d\uff0c\u6bd4\u8f83\u60f3\u8981\u4e86\u89e3\u7684\u5c31\u662f redis\u7684\u534f\u8bae redis\u541e\u5410\u4e3a\u4f55\u5982\u6b64\u4e4b\u9ad8\u4ee5\u81f3\u4e8e\u8bf4\u201c\u7f51\u7edc\u5e26\u5bbd\u5c31\u662fredis\u6700\u5927\u7684\u74f6\u9888\u201d \u4f7f\u7528\u4e00\u4e2amap\u6765\u505a\u4e00\u4e2akv\u7f13\u5b58\u670d\u52a1\u5668\u662f\u5426\u80fd\u591f\u505a\u5230\u548credis\u4e00\u6837\u7684\u6027\u80fd\uff1f\u5982\u679c\u4e0d\u80fd\uff0c\u662f\u4e3a\u4ec0\u4e48\uff0credis\u7684\u6570\u636e\u7ed3\u6784\u6027\u80fd\u6709\u591a\u9ad8","title":"Learn Redis"},{"location":"cmd/","text":"Redis Command \u00b6 \u5728eventloop\u7684\u90a3\u8282\uff0c\u6211\u4eec\u5df2\u7ecf\u770b\u5230\uff0c\u6240\u6709\u547d\u4ee4\u7684handler\u90fd\u5b58\u653e\u5728 server.c \u4e2d\u7684 redisCommandTable \u4e2d \u56e0\u6b64\uff0c\u53ef\u4ee5\u7167\u7740\u90a3\u91cc\u9762\u6240\u7ed1\u5b9a\u7684handler\u770b\u4e0b\u53bb\uff0c\u8fd9\u6837\u4e00\u6765\uff0c\u5c31\u80fd\u77e5\u9053\u6bcf\u4e00\u4e2a\u547d\u4ee4\u662f\u5982\u4f55\u5904\u7406\u7684 db \u00b6 redis\u7684\u547d\u4ee4\u90fd\u662f\u64cd\u4f5c\u5728 redisDb \u8fd9\u4e2a\u7ed3\u6784\u4e0a\u7684\uff0c\u8be5\u7ed3\u6784\u5728 initServer \u7684\u65f6\u5019\u88ab\u521d\u59cb\u5316\u5230\u5168\u5c40\u7684server\u4e0a\uff0c\u6bcf\u6b21\u6709\u65b0\u8fde\u63a5\u8fc7\u6765\uff0c\u5c31\u4f1a\u7ed1\u5b9a\u8be5db 1 2 3 4 5 6 7 8 9 10 11 typedef struct redisDb { dict * dict ; /* The keyspace for this DB */ dict * expires ; /* Timeout of keys with a timeout set */ dict * blocking_keys ; /* Keys with clients waiting for data (BLPOP)*/ dict * ready_keys ; /* Blocked keys that received a PUSH */ dict * watched_keys ; /* WATCHED keys for MULTI/EXEC CAS */ int id ; /* Database ID */ long long avg_ttl ; /* Average TTL, just for stats */ unsigned long expires_cursor ; /* Cursor of the active expire cycle. */ list * defrag_later ; /* List of key names to attempt to defrag one by one, gradually. */ } redisDb ; \u53ef\u4ee5\u770b\u5230\uff0c\u5b58\u50a8\u6570\u636e\u7684\u7ed3\u6784\u5c31\u662f dict \uff0c\u4e5f\u5c31\u662f\u4e00\u4e2amap\uff0c\u7c7b\u4f3c\u4e8e std::map<std::string, void*> ,\u77e5\u9053\u600e\u4e48\u5b58\u4e4b\u540e\uff0c\u4e00\u5207\u90fd\u7b80\u5355\u8d77\u6765\uff0c\u6211\u4eec\u5148\u629b\u5f00\u4e00\u4e9b\u9ad8\u7ea7\u7684\u7279\u6027\uff0c\u4f8b\u5982\u8d85\u65f6\u7b49\uff0c\u7b80\u5355\u770b\u4e0b\u5404\u4e2a\u64cd\u4f5c Get \u00b6 get\u6240\u7ed1\u5b9a\u7684\u662f getCommand \uff0c\u6574\u4e2a\u6d41\u7a0b\u4e5f\u5f88\u7b80\u5355\uff0c\u67e5\u627e\uff0c\u8fd4\u56de Set \u00b6 set\u5219\u6bd4\u8f83\u590d\u6742\u70b9\uff0c\u4ece\u9876\u7aef\u7684\u8c03\u7528\u5f00\u59cb\uff0c\u9996\u5148\u8981\u5224\u65ad\u8fd9\u4e2akey\u662f\u5426\u5b58\u5728\uff0c\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u6dfb\u52a0\uff0c\u5982\u679c\u5b58\u5728\uff0c\u5219\u8986\u76d6 1 2 3 4 5 6 7 8 9 10 void genericSetKey ( client * c , redisDb * db , robj * key , robj * val , int keepttl , int signal ) { if ( lookupKeyWrite ( db , key ) == NULL ) { dbAdd ( db , key , val ); } else { dbOverwrite ( db , key , val ); } incrRefCount ( val ); if ( ! keepttl ) removeExpire ( db , key ); if ( signal ) signalModifiedKey ( c , db , key ); } \u90a3\u4e3a\u4f55\u8981\u5224\u65ad\u662f\u5426\u5b58\u5728\u5462\uff0c\u4e0d\u7ba1\u4e09\u4e03\u4e8c\u5341\u4e00\u76f4\u63a5\u8986\u76d6\u4e0d\u5c31\u5b8c\u4e8b\u4e86\u5417\uff1f \u5f53\u4e00\u4e2a\u7ed3\u679c\u4e00\u6837\u7684\u884c\u4e3a\u88ab\u5206\u6210\u4e86\u4e24\u4e2a\uff1aadd\u548coverwrite\uff0c\u90a3\u4e48\u5c31\u8bf4\u660e\u8fd9\u4e24\u4e2a\u64cd\u4f5c\u53ef\u80fd\u4f1a\u5b58\u5728\u6027\u80fd\u4e0a\u7684\u5dee\u5f02\u6291\u6216\u662f\uff0c\u524d\u63d0(key\u662f\u5426\u5b58\u5728)\u5bf9\u6574\u4e2a\u7cfb\u7edf\u5b58\u5728\u4e00\u4e2a\u6574\u4f53\u7684\u5f71\u54cd\uff0c\u56e0\u6b64\u9700\u8981\u4e24\u79cd\u4e0d\u540c\u7684\u884c\u4e3a\u6765\u5206\u522b\u5904\u7406 \u9996\u5148\u770b\u5224\u65ad\u51fd\u6570 lookupKeyWrite 1 2 3 4 5 6 7 8 robj * lookupKeyWriteWithFlags ( redisDb * db , robj * key , int flags ) { expireIfNeeded ( db , key ); return lookupKey ( db , key , flags ); } robj * lookupKeyWrite ( redisDb * db , robj * key ) { return lookupKeyWriteWithFlags ( db , key , LOOKUP_NONE ); } \u53ef\u4ee5\u770b\u5230\uff0c\u5728\u8bbf\u95eekey\u7684\u65f6\u5019\uff0c\u4f1a\u6709\u4e00\u4e2a expireIfNeeded \u7684\u884c\u4e3a\uff0c\u8fd9\u4e2a\u662f\u4e00\u4e2a\u60f0\u6027\u5220\u9664\u8fc7\u671fkey\u7684\u884c\u4e3a\uff0c\u610f\u56fe\u662f\u8ba9lookupKey\u4e0d\u4f1a\u63a5\u89e6\u5230\u8fc7\u671f\u7684key \u5f53key\u4e0d\u5b58\u5728\u7684\u65f6\u5019\uff0c\u76f4\u63a5\u6dfb\u52a0\u4e00\u4e2akey\uff0c\u4e5f\u5c31\u662f\u76f4\u63a5\u5f80dict\u91cc\u9762\u6dfb\u52a0\u4e1c\u897f \u5f53key\u5b58\u5728\u7684\u65f6\u5019\uff0c\u5219\u4f1a\u5148\u62ff\u5230\u5f53\u524d\u5b58\u5728\u7684key\uff0c\u5c06\u5176value\u8fdb\u884c\u66ff\u6362\uff0c\u800c\u65e7\u7684value\uff0c\u5219\u7531\u7b56\u7565\u6765\u51b3\u5b9a\u662f\u5426\u5220\u9664\uff0c\u56e0\u4e3a\uff0c\u5220\u9664\u4e00\u4e2a\u5360\u7528\u7a7a\u95f4\u5f88\u5927\u7684value\u662f\u975e\u5e38\u6d88\u8017\u6027\u80fd\u7684(\u5728eventloop\u91cc\u9762\u6211\u4eec\u4e5f\u770b\u5230\uff0credis\u5904\u7406\u5ba2\u6237\u7aef\u8bf7\u6c42\u662f\u5355\u7ebf\u7a0b\u7684\uff0c\u56e0\u6b64\u5982\u679c\u4e00\u4e2a\u6307\u4ee4\u6267\u884c\u5f88\u4e45\uff0c\u90a3\u4e48\u5c31\u4f1a\u963b\u585e\u5230\u5176\u4ed6\u7684\u5ba2\u6237\u7aef\u8bf7\u6c42)\uff0c \u8fd9\u5c31\u662fadd\u548coverwrite\u7684\u4e0d\u540c\u4e4b\u5904 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 void dbOverwrite ( redisDb * db , robj * key , robj * val ) { dictEntry * de = dictFind ( db -> dict , key -> ptr ); serverAssertWithInfo ( NULL , key , de != NULL ); dictEntry auxentry = * de ; robj * old = dictGetVal ( de ); if ( server . maxmemory_policy & MAXMEMORY_FLAG_LFU ) { val -> lru = old -> lru ; } dictSetVal ( db -> dict , de , val ); // \u60f0\u6027\u91ca\u653e if ( server . lazyfree_lazy_server_del ) { freeObjAsync ( old ); dictSetVal ( db -> dict , & auxentry , NULL ); } dictFreeVal ( db -> dict , & auxentry ); }","title":"Redis Command"},{"location":"cmd/#redis-command","text":"\u5728eventloop\u7684\u90a3\u8282\uff0c\u6211\u4eec\u5df2\u7ecf\u770b\u5230\uff0c\u6240\u6709\u547d\u4ee4\u7684handler\u90fd\u5b58\u653e\u5728 server.c \u4e2d\u7684 redisCommandTable \u4e2d \u56e0\u6b64\uff0c\u53ef\u4ee5\u7167\u7740\u90a3\u91cc\u9762\u6240\u7ed1\u5b9a\u7684handler\u770b\u4e0b\u53bb\uff0c\u8fd9\u6837\u4e00\u6765\uff0c\u5c31\u80fd\u77e5\u9053\u6bcf\u4e00\u4e2a\u547d\u4ee4\u662f\u5982\u4f55\u5904\u7406\u7684","title":"Redis Command"},{"location":"cmd/#db","text":"redis\u7684\u547d\u4ee4\u90fd\u662f\u64cd\u4f5c\u5728 redisDb \u8fd9\u4e2a\u7ed3\u6784\u4e0a\u7684\uff0c\u8be5\u7ed3\u6784\u5728 initServer \u7684\u65f6\u5019\u88ab\u521d\u59cb\u5316\u5230\u5168\u5c40\u7684server\u4e0a\uff0c\u6bcf\u6b21\u6709\u65b0\u8fde\u63a5\u8fc7\u6765\uff0c\u5c31\u4f1a\u7ed1\u5b9a\u8be5db 1 2 3 4 5 6 7 8 9 10 11 typedef struct redisDb { dict * dict ; /* The keyspace for this DB */ dict * expires ; /* Timeout of keys with a timeout set */ dict * blocking_keys ; /* Keys with clients waiting for data (BLPOP)*/ dict * ready_keys ; /* Blocked keys that received a PUSH */ dict * watched_keys ; /* WATCHED keys for MULTI/EXEC CAS */ int id ; /* Database ID */ long long avg_ttl ; /* Average TTL, just for stats */ unsigned long expires_cursor ; /* Cursor of the active expire cycle. */ list * defrag_later ; /* List of key names to attempt to defrag one by one, gradually. */ } redisDb ; \u53ef\u4ee5\u770b\u5230\uff0c\u5b58\u50a8\u6570\u636e\u7684\u7ed3\u6784\u5c31\u662f dict \uff0c\u4e5f\u5c31\u662f\u4e00\u4e2amap\uff0c\u7c7b\u4f3c\u4e8e std::map<std::string, void*> ,\u77e5\u9053\u600e\u4e48\u5b58\u4e4b\u540e\uff0c\u4e00\u5207\u90fd\u7b80\u5355\u8d77\u6765\uff0c\u6211\u4eec\u5148\u629b\u5f00\u4e00\u4e9b\u9ad8\u7ea7\u7684\u7279\u6027\uff0c\u4f8b\u5982\u8d85\u65f6\u7b49\uff0c\u7b80\u5355\u770b\u4e0b\u5404\u4e2a\u64cd\u4f5c","title":"db"},{"location":"cmd/#get","text":"get\u6240\u7ed1\u5b9a\u7684\u662f getCommand \uff0c\u6574\u4e2a\u6d41\u7a0b\u4e5f\u5f88\u7b80\u5355\uff0c\u67e5\u627e\uff0c\u8fd4\u56de","title":"Get"},{"location":"cmd/#set","text":"set\u5219\u6bd4\u8f83\u590d\u6742\u70b9\uff0c\u4ece\u9876\u7aef\u7684\u8c03\u7528\u5f00\u59cb\uff0c\u9996\u5148\u8981\u5224\u65ad\u8fd9\u4e2akey\u662f\u5426\u5b58\u5728\uff0c\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u6dfb\u52a0\uff0c\u5982\u679c\u5b58\u5728\uff0c\u5219\u8986\u76d6 1 2 3 4 5 6 7 8 9 10 void genericSetKey ( client * c , redisDb * db , robj * key , robj * val , int keepttl , int signal ) { if ( lookupKeyWrite ( db , key ) == NULL ) { dbAdd ( db , key , val ); } else { dbOverwrite ( db , key , val ); } incrRefCount ( val ); if ( ! keepttl ) removeExpire ( db , key ); if ( signal ) signalModifiedKey ( c , db , key ); } \u90a3\u4e3a\u4f55\u8981\u5224\u65ad\u662f\u5426\u5b58\u5728\u5462\uff0c\u4e0d\u7ba1\u4e09\u4e03\u4e8c\u5341\u4e00\u76f4\u63a5\u8986\u76d6\u4e0d\u5c31\u5b8c\u4e8b\u4e86\u5417\uff1f \u5f53\u4e00\u4e2a\u7ed3\u679c\u4e00\u6837\u7684\u884c\u4e3a\u88ab\u5206\u6210\u4e86\u4e24\u4e2a\uff1aadd\u548coverwrite\uff0c\u90a3\u4e48\u5c31\u8bf4\u660e\u8fd9\u4e24\u4e2a\u64cd\u4f5c\u53ef\u80fd\u4f1a\u5b58\u5728\u6027\u80fd\u4e0a\u7684\u5dee\u5f02\u6291\u6216\u662f\uff0c\u524d\u63d0(key\u662f\u5426\u5b58\u5728)\u5bf9\u6574\u4e2a\u7cfb\u7edf\u5b58\u5728\u4e00\u4e2a\u6574\u4f53\u7684\u5f71\u54cd\uff0c\u56e0\u6b64\u9700\u8981\u4e24\u79cd\u4e0d\u540c\u7684\u884c\u4e3a\u6765\u5206\u522b\u5904\u7406 \u9996\u5148\u770b\u5224\u65ad\u51fd\u6570 lookupKeyWrite 1 2 3 4 5 6 7 8 robj * lookupKeyWriteWithFlags ( redisDb * db , robj * key , int flags ) { expireIfNeeded ( db , key ); return lookupKey ( db , key , flags ); } robj * lookupKeyWrite ( redisDb * db , robj * key ) { return lookupKeyWriteWithFlags ( db , key , LOOKUP_NONE ); } \u53ef\u4ee5\u770b\u5230\uff0c\u5728\u8bbf\u95eekey\u7684\u65f6\u5019\uff0c\u4f1a\u6709\u4e00\u4e2a expireIfNeeded \u7684\u884c\u4e3a\uff0c\u8fd9\u4e2a\u662f\u4e00\u4e2a\u60f0\u6027\u5220\u9664\u8fc7\u671fkey\u7684\u884c\u4e3a\uff0c\u610f\u56fe\u662f\u8ba9lookupKey\u4e0d\u4f1a\u63a5\u89e6\u5230\u8fc7\u671f\u7684key \u5f53key\u4e0d\u5b58\u5728\u7684\u65f6\u5019\uff0c\u76f4\u63a5\u6dfb\u52a0\u4e00\u4e2akey\uff0c\u4e5f\u5c31\u662f\u76f4\u63a5\u5f80dict\u91cc\u9762\u6dfb\u52a0\u4e1c\u897f \u5f53key\u5b58\u5728\u7684\u65f6\u5019\uff0c\u5219\u4f1a\u5148\u62ff\u5230\u5f53\u524d\u5b58\u5728\u7684key\uff0c\u5c06\u5176value\u8fdb\u884c\u66ff\u6362\uff0c\u800c\u65e7\u7684value\uff0c\u5219\u7531\u7b56\u7565\u6765\u51b3\u5b9a\u662f\u5426\u5220\u9664\uff0c\u56e0\u4e3a\uff0c\u5220\u9664\u4e00\u4e2a\u5360\u7528\u7a7a\u95f4\u5f88\u5927\u7684value\u662f\u975e\u5e38\u6d88\u8017\u6027\u80fd\u7684(\u5728eventloop\u91cc\u9762\u6211\u4eec\u4e5f\u770b\u5230\uff0credis\u5904\u7406\u5ba2\u6237\u7aef\u8bf7\u6c42\u662f\u5355\u7ebf\u7a0b\u7684\uff0c\u56e0\u6b64\u5982\u679c\u4e00\u4e2a\u6307\u4ee4\u6267\u884c\u5f88\u4e45\uff0c\u90a3\u4e48\u5c31\u4f1a\u963b\u585e\u5230\u5176\u4ed6\u7684\u5ba2\u6237\u7aef\u8bf7\u6c42)\uff0c \u8fd9\u5c31\u662fadd\u548coverwrite\u7684\u4e0d\u540c\u4e4b\u5904 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 void dbOverwrite ( redisDb * db , robj * key , robj * val ) { dictEntry * de = dictFind ( db -> dict , key -> ptr ); serverAssertWithInfo ( NULL , key , de != NULL ); dictEntry auxentry = * de ; robj * old = dictGetVal ( de ); if ( server . maxmemory_policy & MAXMEMORY_FLAG_LFU ) { val -> lru = old -> lru ; } dictSetVal ( db -> dict , de , val ); // \u60f0\u6027\u91ca\u653e if ( server . lazyfree_lazy_server_del ) { freeObjAsync ( old ); dictSetVal ( db -> dict , & auxentry , NULL ); } dictFreeVal ( db -> dict , & auxentry ); }","title":"Set"},{"location":"eventloop/","text":"EventLoop \u00b6 eventloop\u662fLinux\u670d\u52a1\u5668\u7684\u6838\u5fc3\uff0credis\u4e5f\u4e0d\u4f8b\u5916 \u5728\u6e90\u7801\u4e4b\u524d\uff0c\u53ef\u4ee5\u6839\u636e\u7ecf\u9a8c\u731c\u6d4b\u4e00\u4e0bredis\u662f\u5982\u4f55\u4f7f\u7528eventloop\u7684 \u521b\u5efa\u4e00\u4e2a\u76d1\u542c\u4e8b\u4ef6\uff0c\u7ed1\u5b9a\u5bf9\u5e94\u7684\u5904\u7406\u51fd\u6570\uff0c\u7528\u4e8e\u5904\u7406\u5ba2\u6237\u7aef\u8fde\u63a5 \u5f53\u8fde\u63a5\u5efa\u7acb\uff0c\u5c31\u4e3a\u5ba2\u6237\u7aef\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u4e8b\u4ef6\uff0c\u7136\u540e\u7ed1\u5b9a\u5bf9\u5e94\u7684\u5904\u7406\u51fd\u6570\uff0c\u7531\u4e8eredis\u662f\u4e00\u4e2a\u7f13\u5b58\u670d\u52a1\u5668\uff0c\u90a3\u4e48\u5ba2\u6237\u7aef\u6240\u505a\u7684\u4e8b\u60c5\u65e0\u975e\u5c31\u4e24\u7c7b\uff0c\u4fee\u6539\u4e0e\u8bfb\u53d6 redis\u7684eventloop\u5c31\u5728server.c\u4e2d\u7684main\u51fd\u6570\u91cc\u9762\u88ab\u542f\u52a8\u4e86\uff0c\u5982\u4e0b 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 int main () { ... aeMain ( server . el ); aeDeleteEventLoop ( server . el ); return 0 ; } void aeMain ( aeEventLoop * eventLoop ) { eventLoop -> stop = 0 ; while ( ! eventLoop -> stop ) { aeProcessEvents ( eventLoop , AE_ALL_EVENTS | AE_CALL_BEFORE_SLEEP | AE_CALL_AFTER_SLEEP ); } } \u4ece\u5165\u53c2\u53ef\u4ee5\u77e5\u9053\uff0c\u4e00\u4e9b\u670d\u52a1\u5668\u7684\u4fe1\u606f\uff0c\u4f8b\u5982ip\uff0c\u7aef\u53e3\u4e4b\u7c7b\u7684\uff0c\u80af\u5b9a\u662f\u7ed1\u5b9a\u5728\u91cc\u9762\uff0c\u679c\u4e0d\u5176\u7136\uff0c\u5728\u542f\u52a8\u4e4b\u524d\uff0c\u4f1a\u8c03\u7528\u4e00\u4e2ainitServer\u6765\u521d\u59cb\u5316\u4e00\u4e9b\u57fa\u672c\u7684\u4fe1\u606f InitServer \u00b6 \u5728redis\u4e2d\uff0cserver\u662f\u4f5c\u4e3a\u5168\u5c40\u53d8\u91cf\u5b9a\u4e49\u7684 1 2 /* Global vars */ struct redisServer server ; /* Server global state */ \u5728\u51fd\u6570InitServer\u4e2d\uff0c\u4f1a\u627e\u5230\u670d\u52a1\u5668\u7684\u6807\u51c6\u5957\u8def\uff1a\u521b\u5efaeventloop\uff0c\u521b\u5efa\u4e8b\u4ef6\uff0c\u7ed1\u5b9a\u5904\u7406\u51fd\u6570\uff0c\u6ce8\u518c\u5230eventloop\u4e2d\uff0c\u5982\u4e0b 1 2 3 4 5 6 7 8 9 10 11 12 if ( aeApiCreate ( eventLoop ) == - 1 ) goto err ; ... /* Create an event handler for accepting new connections in TCP and Unix * domain sockets. */ for ( j = 0 ; j < server . ipfd_count ; j ++ ) { if ( aeCreateFileEvent ( server . el , server . ipfd [ j ], AE_READABLE , acceptTcpHandler , NULL ) == AE_ERR ) { serverPanic ( \"Unrecoverable error creating server.ipfd file event.\" ); } } Accept \u00b6 \u670d\u52a1\u5668\u7684\u5165\u53e3\u5c31\u662f\u63a5\u53d7\u5ba2\u6237\u7aef\u8fde\u63a5\u7684accept\uff0caccept\u7ed1\u5b9a\u7684\u662f acceptTcpHandler \u51fd\u6570\uff0c\u5f53\u5ba2\u6237\u7aef\u8bf7\u6c42\u5efa\u7acb\u8fde\u63a5\uff0c\u5c31\u4f1a\u5728\u90a3\u91cc\u88abaccept\u7136\u540e\u7ed1\u5b9a\u5bf9\u5e94\u7684read handler( void readQueryFromClient(connection *conn) )\u6765\u5904\u7406\u5ba2\u6237\u7aef\u53d1\u9001\u8fc7\u6765\u7684\u547d\u4ee4/\u8bf7\u6c42 accpet\u4e4b\u540e\uff0c\u8fde\u63a5\u4f1a\u5bf9\u5e94\u4e00\u4e2aclient\u7ed3\u6784\uff0c\u91cc\u9762\u7ed1\u5b9a\u4e86\u4e00\u4e2aredisDb\uff0c\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u90fd\u4f1a\u5728\u90a3\u4e2adb\u4e0a\u6267\u884c readQueryFromClient \u00b6 \u8be5\u51fd\u6570\u662f\u5ba2\u6237\u7aef\u6240\u7ed1\u5b9a\u7684\u56de\u8c03\uff0c\u5f53\u6570\u636e\u5230\u8fbe\u4e4b\u540e\u5c31\u4f1a\u8c03\u7528\u8be5\u51fd\u6570\uff0c\u9996\u5148\u662f\u8bfb\uff0c\u7136\u540e\u662f\u89e3\u6790\u534f\u8bae\uff0c\u6267\u884c\u547d\u4ee4\uff0c\u6700\u540e\u662f\u8fd4\u56de\u7ed3\u679c\uff0c\u6240\u5bf9\u5e94\u7684\u51fd\u6570\u662f \u8bfb\uff1areadQueryFromClient \u89e3\u6790\uff1aprocessCommand \u6267\u884c\uff1acall \u8fd4\u56de\u7ed3\u679c\uff1a\u4f1a\u5728\u6267\u884c\u6307\u4ee4\u7684\u8fc7\u7a0b\u4e2d\u8c03\u7528addReply\u7b49\u51fd\u6570 call \u00b6 \u629b\u5f00\u5176\u4ed6\u7684\u6d41\u7a0b\uff0c\u6700\u5173\u952e\u7684\u5c31\u662f\u6267\u884c\u6307\u4ee4\u7684call\uff0c\u5982\u4e0b 1 2 3 4 5 6 7 8 /* Call the command. */ dirty = server . dirty ; updateCachedTime ( 0 ); start = server . ustime ; c -> cmd -> proc ( c ); //\u5728\u8fd9\u91cc\u8c03\u7528cmd\u6240\u7ed1\u5b9a\u7684handler duration = ustime () - start ; dirty = server . dirty - dirty ; if ( dirty < 0 ) dirty = 0 ; \u5728call\u91cc\u9762\uff0c\u4f7f\u7528 c->cmd->proc \u8fdb\u884c\u6307\u4ee4\u7684\u5904\u7406\uff0c\u90a3\u4e48\u8fd9\u4e2aproc\u53c8\u662f\u4ec0\u4e48\u65f6\u5019\u8fdb\u884c\u7ed1\u5b9a\u7684\u5462\uff0c\u7b54\u6848\u662f\u5728ProcessCommand\u7684\u65f6\u5019 1 2 3 4 5 6 7 8 9 10 c -> cmd = c -> lastcmd = lookupCommand ( c -> argv [ 0 ] -> ptr ); //\u627e\u5230\u8be5\u51fd\u6570\u6240\u7ed1\u5b9a\u7684handler // lookupCommand\u51fd\u6570 func lookupCommand (...) { dictEntry * he ; ... he = dictFind ( server . commands , key ); //handler\u662f\u4ece\u5168\u5c40\u7684server\u91cc\u9762\u627e\u7684 return he ? dictGetVal ( he ) : NULL ; } \u4ece\u4e0a\u9762\u770b\u5230\uff0ccmd\u662f\u4eceserver\u91cc\u9762\u627e\u5230\u7684\uff0c\u90a3\u4e48\u56de\u5934\u770b\u5c31\u4f1a\u53d1\u73b0\uff0c\u4e00\u5f00\u59cb\u5c31\u5148\u5728initServer\u521d\u59cb\u5316\u4e86servier.commands\u8fd9\u4e2a\u8868 1 2 3 server . commands = dictCreate ( & commandTableDictType , NULL ); server . orig_commands = dictCreate ( & commandTableDictType , NULL ); populateCommandTable (); \u5176\u4e2d populateCommandTable \u5c31\u662f\u5c06\u786c\u7f16\u7801\u7684\u6307\u4ee4\u89e3\u6790\u51fa\u6765\u653e\u5230commands\u4e2d\uff0c\u786c\u7f16\u7801\u7684\u8868\u5982\u4e0b\uff0c\u8be5\u8868\u4f4d\u4e8e server.c \u7684\u5f00\u5934 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 struct redisCommand redisCommandTable [] = { { \"module\" , moduleCommand , - 2 , \"admin no-script\" , 0 , NULL , 0 , 0 , 0 , 0 , 0 , 0 }, { \"get\" , getCommand , 2 , \"read-only fast @string\" , 0 , NULL , 1 , 1 , 1 , 0 , 0 , 0 }, /* Note that we can't flag set as fast, since it may perform an * implicit DEL of a large key. */ { \"set\" , setCommand , - 3 , \"write use-memory @string\" , 0 , NULL , 1 , 1 , 1 , 0 , 0 , 0 }, { \"setnx\" , setnxCommand , 3 , \"write use-memory fast @string\" , 0 , NULL , 1 , 1 , 1 , 0 , 0 , 0 }, { \"setex\" , setexCommand , 4 , \"write use-memory @string\" , 0 , NULL , 1 , 1 , 1 , 0 , 0 , 0 }, ... }; \u5176\u4e2dredisCommand\u7684\u7ed3\u6784\u5982\u4e0b 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 struct redisCommand { char * name ; redisCommandProc * proc ; int arity ; char * sflags ; /* Flags as string representation, one char per flag. */ uint64_t flags ; /* The actual flags, obtained from the 'sflags' field. */ /* Use a function to determine keys arguments in a command line. * Used for Redis Cluster redirect. */ redisGetKeysProc * getkeys_proc ; /* What keys should be loaded in background when calling this command? */ int firstkey ; /* The first argument that's a key (0 = no keys) */ int lastkey ; /* The last argument that's a key */ int keystep ; /* The step between first and last key */ long long microseconds , calls ; int id ; /* Command ID. This is a progressive ID starting from 0 that is assigned at runtime, and is used in order to check ACLs. A connection is able to execute a given command if the user associated to the connection has this command bit set in the bitmap of allowed commands. */ }; \u53ef\u4ee5\u770b\u5230\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u5c31\u662f\u8be5\u547d\u4ee4\u6240\u7ed1\u5b9a\u7684handler \u4f8b\u5982\uff0c\u5ba2\u6237\u7aef\u53d1\u9001\u4e86\u4e00\u4e2aget\u6307\u4ee4\uff0c\u90a3\u4e48\u5c31\u8fdb\u5165\u4e0b\u9762\u7684handler\u4e2d 1 2 3 4 5 6 7 8 9 10 11 12 13 14 int getGenericCommand ( client * c ) { robj * o ; if (( o = lookupKeyReadOrReply ( c , c -> argv [ 1 ], shared . null [ c -> resp ])) == NULL ) return C_OK ; if ( o -> type != OBJ_STRING ) { addReply ( c , shared . wrongtypeerr ); return C_ERR ; } else { addReplyBulk ( c , o ); return C_OK ; } } \u5728\u547d\u4ee4\u7ed3\u675f\u540e\uff0c\u4f1a\u5c06\u7ed3\u679c\u901a\u8fc7addReply\u653e\u5165\u5bf9\u5e94\u7684\u7f13\u51b2\u533a\u4e2d \u90a3\u4e48\u4ec0\u4e48\u65f6\u5019\u5c06\u6570\u636e\u53d1\u9001\u5230\u5ba2\u6237\u7aef\u5462\uff1f\u5728redis\u4e2d\uff0c\u6709\u4e00\u4e2abeforesleep\uff0c\u6bcf\u6b21\u8fdb\u5165eventloop\u524d\u90fd\u4f1a\u8c03\u7528 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 /* This function gets called every time Redis is entering the * main loop of the event driven library, that is, before to sleep * for ready file descriptors. * * Note: This function is (currently) called from two functions: * 1. aeMain - The main server loop * 2. processEventsWhileBlocked - Process clients during RDB/AOF load * * If it was called from processEventsWhileBlocked we don't want * to perform all actions (For example, we don't want to expire * keys), but we do need to perform some actions. * * The most important is freeClientsInAsyncFreeQueue but we also * call some other low-risk functions. */ void beforeSleep(struct aeEventLoop *eventLoop); \u5f53\u5ba2\u6237\u7aef\u7684\u547d\u4ee4\u5904\u7406\u5b8c\u540e\u5c06\u7ed3\u679c\u5199\u5165\u7f13\u51b2\u533a\uff0credis\u4f1a\u5728beforesleep\u91cc\u9762\u8c03\u7528 handleClientsWithPendingWritesUsingThreads \u7b49\u51fd\u6570\uff0c\u5c06\u7ed3\u679c\u5199\u5230\u5ba2\u6237\u7aef\u4e2d \u90a3\u4e48\u6574\u4e2a\u5927\u81f4\u7684\u6d41\u7a0b\u5c31\u662f \u670d\u52a1\u5668\u751f\u6210 cmd-handler\u7684\u8868 \u65b0\u5efa\u4e00\u4e9b\u4e8b\u4ef6\uff0c\u5982\u8d85\u65f6\uff0caccept\u7b49\uff0c\u7136\u540e\u8fdb\u5165\u7b49\u5f85 \u5f53\u8fde\u63a5\u5230\u8fbe\uff0caccept\u5ba2\u6237\u7aef\u8fde\u63a5\uff0c\u7136\u540e\u7ed1\u5b9a\u5bf9\u5e94\u7684handler \u5f53\u6570\u636e\u5230\u6765\uff0c\u4f7f\u7528\u90a3\u4e2ahandler\u8bfb\u53d6\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\uff0c\u63a5\u7740\u89e3\u6790\u8bf7\u6c42\uff0c\u5f97\u5230cmd\uff0c\u7136\u540e\u4ece\u8868\u4e2d\u627e\u5230cmd\u6240\u7ed1\u5b9a\u7684handler\uff0c\u8fdb\u884c\u5904\u7406 \u5904\u7406\u5b8c\u6bd5\u540e\uff0c\u8fdb\u5165beforesleep\uff0c\u5c06\u8bf7\u6c42\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef","title":"Redis EventLoop"},{"location":"eventloop/#eventloop","text":"eventloop\u662fLinux\u670d\u52a1\u5668\u7684\u6838\u5fc3\uff0credis\u4e5f\u4e0d\u4f8b\u5916 \u5728\u6e90\u7801\u4e4b\u524d\uff0c\u53ef\u4ee5\u6839\u636e\u7ecf\u9a8c\u731c\u6d4b\u4e00\u4e0bredis\u662f\u5982\u4f55\u4f7f\u7528eventloop\u7684 \u521b\u5efa\u4e00\u4e2a\u76d1\u542c\u4e8b\u4ef6\uff0c\u7ed1\u5b9a\u5bf9\u5e94\u7684\u5904\u7406\u51fd\u6570\uff0c\u7528\u4e8e\u5904\u7406\u5ba2\u6237\u7aef\u8fde\u63a5 \u5f53\u8fde\u63a5\u5efa\u7acb\uff0c\u5c31\u4e3a\u5ba2\u6237\u7aef\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u4e8b\u4ef6\uff0c\u7136\u540e\u7ed1\u5b9a\u5bf9\u5e94\u7684\u5904\u7406\u51fd\u6570\uff0c\u7531\u4e8eredis\u662f\u4e00\u4e2a\u7f13\u5b58\u670d\u52a1\u5668\uff0c\u90a3\u4e48\u5ba2\u6237\u7aef\u6240\u505a\u7684\u4e8b\u60c5\u65e0\u975e\u5c31\u4e24\u7c7b\uff0c\u4fee\u6539\u4e0e\u8bfb\u53d6 redis\u7684eventloop\u5c31\u5728server.c\u4e2d\u7684main\u51fd\u6570\u91cc\u9762\u88ab\u542f\u52a8\u4e86\uff0c\u5982\u4e0b 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 int main () { ... aeMain ( server . el ); aeDeleteEventLoop ( server . el ); return 0 ; } void aeMain ( aeEventLoop * eventLoop ) { eventLoop -> stop = 0 ; while ( ! eventLoop -> stop ) { aeProcessEvents ( eventLoop , AE_ALL_EVENTS | AE_CALL_BEFORE_SLEEP | AE_CALL_AFTER_SLEEP ); } } \u4ece\u5165\u53c2\u53ef\u4ee5\u77e5\u9053\uff0c\u4e00\u4e9b\u670d\u52a1\u5668\u7684\u4fe1\u606f\uff0c\u4f8b\u5982ip\uff0c\u7aef\u53e3\u4e4b\u7c7b\u7684\uff0c\u80af\u5b9a\u662f\u7ed1\u5b9a\u5728\u91cc\u9762\uff0c\u679c\u4e0d\u5176\u7136\uff0c\u5728\u542f\u52a8\u4e4b\u524d\uff0c\u4f1a\u8c03\u7528\u4e00\u4e2ainitServer\u6765\u521d\u59cb\u5316\u4e00\u4e9b\u57fa\u672c\u7684\u4fe1\u606f","title":"EventLoop"},{"location":"eventloop/#initserver","text":"\u5728redis\u4e2d\uff0cserver\u662f\u4f5c\u4e3a\u5168\u5c40\u53d8\u91cf\u5b9a\u4e49\u7684 1 2 /* Global vars */ struct redisServer server ; /* Server global state */ \u5728\u51fd\u6570InitServer\u4e2d\uff0c\u4f1a\u627e\u5230\u670d\u52a1\u5668\u7684\u6807\u51c6\u5957\u8def\uff1a\u521b\u5efaeventloop\uff0c\u521b\u5efa\u4e8b\u4ef6\uff0c\u7ed1\u5b9a\u5904\u7406\u51fd\u6570\uff0c\u6ce8\u518c\u5230eventloop\u4e2d\uff0c\u5982\u4e0b 1 2 3 4 5 6 7 8 9 10 11 12 if ( aeApiCreate ( eventLoop ) == - 1 ) goto err ; ... /* Create an event handler for accepting new connections in TCP and Unix * domain sockets. */ for ( j = 0 ; j < server . ipfd_count ; j ++ ) { if ( aeCreateFileEvent ( server . el , server . ipfd [ j ], AE_READABLE , acceptTcpHandler , NULL ) == AE_ERR ) { serverPanic ( \"Unrecoverable error creating server.ipfd file event.\" ); } }","title":"InitServer"},{"location":"eventloop/#accept","text":"\u670d\u52a1\u5668\u7684\u5165\u53e3\u5c31\u662f\u63a5\u53d7\u5ba2\u6237\u7aef\u8fde\u63a5\u7684accept\uff0caccept\u7ed1\u5b9a\u7684\u662f acceptTcpHandler \u51fd\u6570\uff0c\u5f53\u5ba2\u6237\u7aef\u8bf7\u6c42\u5efa\u7acb\u8fde\u63a5\uff0c\u5c31\u4f1a\u5728\u90a3\u91cc\u88abaccept\u7136\u540e\u7ed1\u5b9a\u5bf9\u5e94\u7684read handler( void readQueryFromClient(connection *conn) )\u6765\u5904\u7406\u5ba2\u6237\u7aef\u53d1\u9001\u8fc7\u6765\u7684\u547d\u4ee4/\u8bf7\u6c42 accpet\u4e4b\u540e\uff0c\u8fde\u63a5\u4f1a\u5bf9\u5e94\u4e00\u4e2aclient\u7ed3\u6784\uff0c\u91cc\u9762\u7ed1\u5b9a\u4e86\u4e00\u4e2aredisDb\uff0c\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u90fd\u4f1a\u5728\u90a3\u4e2adb\u4e0a\u6267\u884c","title":"Accept"},{"location":"eventloop/#readqueryfromclient","text":"\u8be5\u51fd\u6570\u662f\u5ba2\u6237\u7aef\u6240\u7ed1\u5b9a\u7684\u56de\u8c03\uff0c\u5f53\u6570\u636e\u5230\u8fbe\u4e4b\u540e\u5c31\u4f1a\u8c03\u7528\u8be5\u51fd\u6570\uff0c\u9996\u5148\u662f\u8bfb\uff0c\u7136\u540e\u662f\u89e3\u6790\u534f\u8bae\uff0c\u6267\u884c\u547d\u4ee4\uff0c\u6700\u540e\u662f\u8fd4\u56de\u7ed3\u679c\uff0c\u6240\u5bf9\u5e94\u7684\u51fd\u6570\u662f \u8bfb\uff1areadQueryFromClient \u89e3\u6790\uff1aprocessCommand \u6267\u884c\uff1acall \u8fd4\u56de\u7ed3\u679c\uff1a\u4f1a\u5728\u6267\u884c\u6307\u4ee4\u7684\u8fc7\u7a0b\u4e2d\u8c03\u7528addReply\u7b49\u51fd\u6570","title":"readQueryFromClient"},{"location":"eventloop/#call","text":"\u629b\u5f00\u5176\u4ed6\u7684\u6d41\u7a0b\uff0c\u6700\u5173\u952e\u7684\u5c31\u662f\u6267\u884c\u6307\u4ee4\u7684call\uff0c\u5982\u4e0b 1 2 3 4 5 6 7 8 /* Call the command. */ dirty = server . dirty ; updateCachedTime ( 0 ); start = server . ustime ; c -> cmd -> proc ( c ); //\u5728\u8fd9\u91cc\u8c03\u7528cmd\u6240\u7ed1\u5b9a\u7684handler duration = ustime () - start ; dirty = server . dirty - dirty ; if ( dirty < 0 ) dirty = 0 ; \u5728call\u91cc\u9762\uff0c\u4f7f\u7528 c->cmd->proc \u8fdb\u884c\u6307\u4ee4\u7684\u5904\u7406\uff0c\u90a3\u4e48\u8fd9\u4e2aproc\u53c8\u662f\u4ec0\u4e48\u65f6\u5019\u8fdb\u884c\u7ed1\u5b9a\u7684\u5462\uff0c\u7b54\u6848\u662f\u5728ProcessCommand\u7684\u65f6\u5019 1 2 3 4 5 6 7 8 9 10 c -> cmd = c -> lastcmd = lookupCommand ( c -> argv [ 0 ] -> ptr ); //\u627e\u5230\u8be5\u51fd\u6570\u6240\u7ed1\u5b9a\u7684handler // lookupCommand\u51fd\u6570 func lookupCommand (...) { dictEntry * he ; ... he = dictFind ( server . commands , key ); //handler\u662f\u4ece\u5168\u5c40\u7684server\u91cc\u9762\u627e\u7684 return he ? dictGetVal ( he ) : NULL ; } \u4ece\u4e0a\u9762\u770b\u5230\uff0ccmd\u662f\u4eceserver\u91cc\u9762\u627e\u5230\u7684\uff0c\u90a3\u4e48\u56de\u5934\u770b\u5c31\u4f1a\u53d1\u73b0\uff0c\u4e00\u5f00\u59cb\u5c31\u5148\u5728initServer\u521d\u59cb\u5316\u4e86servier.commands\u8fd9\u4e2a\u8868 1 2 3 server . commands = dictCreate ( & commandTableDictType , NULL ); server . orig_commands = dictCreate ( & commandTableDictType , NULL ); populateCommandTable (); \u5176\u4e2d populateCommandTable \u5c31\u662f\u5c06\u786c\u7f16\u7801\u7684\u6307\u4ee4\u89e3\u6790\u51fa\u6765\u653e\u5230commands\u4e2d\uff0c\u786c\u7f16\u7801\u7684\u8868\u5982\u4e0b\uff0c\u8be5\u8868\u4f4d\u4e8e server.c \u7684\u5f00\u5934 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 struct redisCommand redisCommandTable [] = { { \"module\" , moduleCommand , - 2 , \"admin no-script\" , 0 , NULL , 0 , 0 , 0 , 0 , 0 , 0 }, { \"get\" , getCommand , 2 , \"read-only fast @string\" , 0 , NULL , 1 , 1 , 1 , 0 , 0 , 0 }, /* Note that we can't flag set as fast, since it may perform an * implicit DEL of a large key. */ { \"set\" , setCommand , - 3 , \"write use-memory @string\" , 0 , NULL , 1 , 1 , 1 , 0 , 0 , 0 }, { \"setnx\" , setnxCommand , 3 , \"write use-memory fast @string\" , 0 , NULL , 1 , 1 , 1 , 0 , 0 , 0 }, { \"setex\" , setexCommand , 4 , \"write use-memory @string\" , 0 , NULL , 1 , 1 , 1 , 0 , 0 , 0 }, ... }; \u5176\u4e2dredisCommand\u7684\u7ed3\u6784\u5982\u4e0b 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 struct redisCommand { char * name ; redisCommandProc * proc ; int arity ; char * sflags ; /* Flags as string representation, one char per flag. */ uint64_t flags ; /* The actual flags, obtained from the 'sflags' field. */ /* Use a function to determine keys arguments in a command line. * Used for Redis Cluster redirect. */ redisGetKeysProc * getkeys_proc ; /* What keys should be loaded in background when calling this command? */ int firstkey ; /* The first argument that's a key (0 = no keys) */ int lastkey ; /* The last argument that's a key */ int keystep ; /* The step between first and last key */ long long microseconds , calls ; int id ; /* Command ID. This is a progressive ID starting from 0 that is assigned at runtime, and is used in order to check ACLs. A connection is able to execute a given command if the user associated to the connection has this command bit set in the bitmap of allowed commands. */ }; \u53ef\u4ee5\u770b\u5230\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u5c31\u662f\u8be5\u547d\u4ee4\u6240\u7ed1\u5b9a\u7684handler \u4f8b\u5982\uff0c\u5ba2\u6237\u7aef\u53d1\u9001\u4e86\u4e00\u4e2aget\u6307\u4ee4\uff0c\u90a3\u4e48\u5c31\u8fdb\u5165\u4e0b\u9762\u7684handler\u4e2d 1 2 3 4 5 6 7 8 9 10 11 12 13 14 int getGenericCommand ( client * c ) { robj * o ; if (( o = lookupKeyReadOrReply ( c , c -> argv [ 1 ], shared . null [ c -> resp ])) == NULL ) return C_OK ; if ( o -> type != OBJ_STRING ) { addReply ( c , shared . wrongtypeerr ); return C_ERR ; } else { addReplyBulk ( c , o ); return C_OK ; } } \u5728\u547d\u4ee4\u7ed3\u675f\u540e\uff0c\u4f1a\u5c06\u7ed3\u679c\u901a\u8fc7addReply\u653e\u5165\u5bf9\u5e94\u7684\u7f13\u51b2\u533a\u4e2d \u90a3\u4e48\u4ec0\u4e48\u65f6\u5019\u5c06\u6570\u636e\u53d1\u9001\u5230\u5ba2\u6237\u7aef\u5462\uff1f\u5728redis\u4e2d\uff0c\u6709\u4e00\u4e2abeforesleep\uff0c\u6bcf\u6b21\u8fdb\u5165eventloop\u524d\u90fd\u4f1a\u8c03\u7528 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 /* This function gets called every time Redis is entering the * main loop of the event driven library, that is, before to sleep * for ready file descriptors. * * Note: This function is (currently) called from two functions: * 1. aeMain - The main server loop * 2. processEventsWhileBlocked - Process clients during RDB/AOF load * * If it was called from processEventsWhileBlocked we don't want * to perform all actions (For example, we don't want to expire * keys), but we do need to perform some actions. * * The most important is freeClientsInAsyncFreeQueue but we also * call some other low-risk functions. */ void beforeSleep(struct aeEventLoop *eventLoop); \u5f53\u5ba2\u6237\u7aef\u7684\u547d\u4ee4\u5904\u7406\u5b8c\u540e\u5c06\u7ed3\u679c\u5199\u5165\u7f13\u51b2\u533a\uff0credis\u4f1a\u5728beforesleep\u91cc\u9762\u8c03\u7528 handleClientsWithPendingWritesUsingThreads \u7b49\u51fd\u6570\uff0c\u5c06\u7ed3\u679c\u5199\u5230\u5ba2\u6237\u7aef\u4e2d \u90a3\u4e48\u6574\u4e2a\u5927\u81f4\u7684\u6d41\u7a0b\u5c31\u662f \u670d\u52a1\u5668\u751f\u6210 cmd-handler\u7684\u8868 \u65b0\u5efa\u4e00\u4e9b\u4e8b\u4ef6\uff0c\u5982\u8d85\u65f6\uff0caccept\u7b49\uff0c\u7136\u540e\u8fdb\u5165\u7b49\u5f85 \u5f53\u8fde\u63a5\u5230\u8fbe\uff0caccept\u5ba2\u6237\u7aef\u8fde\u63a5\uff0c\u7136\u540e\u7ed1\u5b9a\u5bf9\u5e94\u7684handler \u5f53\u6570\u636e\u5230\u6765\uff0c\u4f7f\u7528\u90a3\u4e2ahandler\u8bfb\u53d6\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\uff0c\u63a5\u7740\u89e3\u6790\u8bf7\u6c42\uff0c\u5f97\u5230cmd\uff0c\u7136\u540e\u4ece\u8868\u4e2d\u627e\u5230cmd\u6240\u7ed1\u5b9a\u7684handler\uff0c\u8fdb\u884c\u5904\u7406 \u5904\u7406\u5b8c\u6bd5\u540e\uff0c\u8fdb\u5165beforesleep\uff0c\u5c06\u8bf7\u6c42\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef","title":"call"}]}